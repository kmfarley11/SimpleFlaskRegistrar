from collections import Counter
from flask import Flask, request, g, render_template, flash, redirect, url_for, session
import sqlite3
import bcrypt
#from flask_login import LoginManager

app = Flask(__name__)

# TODO: move config to separate file...
APP_PATH = '/home/ubuntu/flaskapp'
DATABASE = APP_PATH + '/flaskapp.db'
SALT_PATH = APP_PATH + '/salt.txt'
SALT = ''
with open(SALT_PATH, 'r') as sp:
    SALT = sp.read()
SECRET_KEY = 'super secret key'
DEBUG = True
SESSION_TYPE = 'filesystem'

app.config.from_object(__name__)

# TODO: use login manager... (need to fix mod_wsgi/venv for that though...)
#login_manager = LoginManager()


@app.route('/', methods=["GET","POST"])
def index():
    error = ''
    try:
        if request.method == 'POST':
            # TODO: input sanitization...
            uname = request.form['username']
            session['username'] = str(uname)
            passw = request.form['password']
            usrget = execute_query('SELECT password FROM flaskapp WHERE username=?', (uname,))
            hashed = bcrypt.hashpw(str(passw), app.config['SALT'])
            session['hashed'] = str(hashed)
            if usrget:
                if hashed == usrget[0][0]:
                    return redirect(url_for('viewdb'))
                else:
                    error = 'Invalid password!'
            else:
                # error = 'User not found!'
                # not actually an error
                return redirect(url_for('register'))
    except Exception as e:
        error = [e, uname]
    return render_template('index.html', error = error)


@app.route('/register', methods=["GET", "POST"])
def register():
    # TODO: format table (use html/css...)
    if not session['username'] or not session['hashed']:
        return '<h4>ERROR: username/hash not provided!?</h4>'
    error = ''
    try:
        if request.method == 'POST':
            # TODO: input sanitization...
            fname = request.form['firstname']
            lname = request.form['lastname']
            email = request.form['email']
            
            sqlcmd = 'INSERT INTO flaskapp VALUES (?,?,?,?,?)'
            sqlargs = (session['username'], session['hashed'], fname, lname, email)
            conn = get_db()
            cur = conn.execute(sqlcmd, sqlargs)
            conn.commit()

            return redirect(url_for('viewdb'))
    except Exception as e:
        error = [e]
    return render_template('register.html', error = error)


@app.route('/viewdb')
def viewdb():
    # TODO: format table (use html/css...)
    if not session['username']:
        return '<h4>ERROR: username not provided!?</h4>'

    columns = 'firstname,lastname,email'
    rows = execute_query('SELECT %s FROM flaskapp WHERE username=?' % (columns), (session['username'],))
    rows = [columns.split(',')] + rows
    return '<br>'.join(str(row) for row in rows)


###############################################################################
# COPY PASTA FROM TUTORIAL
# https://www.datasciencebytes.com/bytes/2015/02/28/using-flask-to-answer-sql-queries/

def connect_to_database():
    return sqlite3.connect(app.config['DATABASE'])

def get_db():
    db = getattr(g, 'db', None)
    if db is None:
        db = g.db = connect_to_database()
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, 'db', None)
    if db is not None:
        db.close()

def execute_query(query, args=()):
    cur = get_db().execute(query, args)
    rows = cur.fetchall()
    cur.close()
    return rows
###############################################################################


if __name__ == '__main__':
    # NOTE: this wont really get hit since its being used with mod_wsgi...
    app.secret_key = 'super secret key'
    app.config['SESSION_TYPE'] = 'filesystem'
    session.init_app(app)
    app.debug = True
    app.run()

